import "./chunk-X7HCJ7ZS.js";
import "./chunk-TDRWH72F.js";
import {
  SvelteComponentDev,
  add_location,
  attr_dev,
  check_outros,
  children,
  claim_element,
  createEventDispatcher,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  get_all_dirty_from_scope,
  get_slot_changes,
  group_outros,
  init,
  insert_hydration_dev,
  onMount,
  safe_not_equal,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-663KAPRR.js";
import "./chunk-XSLCAIPP.js";
import "./chunk-TYRVL62N.js";

// node_modules/saos/Saos.svelte
var file = "node_modules/saos/Saos.svelte";
function create_else_block(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { style: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "style", div_style_value = "animation: " + /*animation_out*/
      ctx[1] + "; " + /*css_animation*/
      ctx[3]);
      add_location(div, file, 75, 4, 2230);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*animation_out, css_animation*/
      10 && div_style_value !== (div_style_value = "animation: " + /*animation_out*/
      ctx2[1] + "; " + /*css_animation*/
      ctx2[3])) {
        attr_dev(div, "style", div_style_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(75:2) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let div;
  let div_style_value;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    null
  );
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { style: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "style", div_style_value = "animation: " + /*animation*/
      ctx[0] + "; " + /*css_animation*/
      ctx[3]);
      add_location(div, file, 71, 4, 2136);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        512)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (!current || dirty & /*animation, css_animation*/
      9 && div_style_value !== (div_style_value = "animation: " + /*animation*/
      ctx2[0] + "; " + /*css_animation*/
      ctx2[3])) {
        attr_dev(div, "style", div_style_value);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(71:2) {#if observing}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*observing*/
      ctx2[4]
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      div = element("div");
      if_block.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { id: true, style: true });
      var div_nodes = children(div);
      if_block.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(
        div,
        "id",
        /*countainer*/
        ctx[5]
      );
      attr_dev(
        div,
        "style",
        /*css_observer*/
        ctx[2]
      );
      add_location(div, file, 69, 0, 2071);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
      if (!current || dirty & /*css_observer*/
      4) {
        attr_dev(
          div,
          "style",
          /*css_observer*/
          ctx2[2]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if_blocks[current_block_type_index].d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Saos", slots, ["default"]);
  let { animation = "none" } = $$props;
  let { animation_out = "none; opacity: 0" } = $$props;
  let { once = false } = $$props;
  let { top = 0 } = $$props;
  let { bottom = 0 } = $$props;
  let { css_observer = "" } = $$props;
  let { css_animation = "" } = $$props;
  const dispatch = createEventDispatcher();
  let observing = true;
  const countainer = `__saos-${Math.random()}__`;
  function intersection_verify(box) {
    const rootMargin = `${-bottom}px 0px ${-top}px 0px`;
    const observer = new IntersectionObserver(
      (entries) => {
        $$invalidate(4, observing = entries[0].isIntersecting);
        if (observing && once) {
          observer.unobserve(box);
        }
      },
      { rootMargin }
    );
    observer.observe(box);
    return () => observer.unobserve(box);
  }
  function bounding_verify(box) {
    const c = box.getBoundingClientRect();
    $$invalidate(4, observing = c.top + top < window.innerHeight && c.bottom - bottom > 0);
    if (observing && once) {
      window.removeEventListener("scroll", verify);
    }
    window.addEventListener("scroll", bounding_verify);
    return () => window.removeEventListener("scroll", bounding_verify);
  }
  onMount(() => {
    const box = document.getElementById(countainer);
    if (IntersectionObserver) {
      return intersection_verify(box);
    } else {
      return bounding_verify(box);
    }
  });
  const writable_props = [
    "animation",
    "animation_out",
    "once",
    "top",
    "bottom",
    "css_observer",
    "css_animation"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Saos> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("animation" in $$props2)
      $$invalidate(0, animation = $$props2.animation);
    if ("animation_out" in $$props2)
      $$invalidate(1, animation_out = $$props2.animation_out);
    if ("once" in $$props2)
      $$invalidate(6, once = $$props2.once);
    if ("top" in $$props2)
      $$invalidate(7, top = $$props2.top);
    if ("bottom" in $$props2)
      $$invalidate(8, bottom = $$props2.bottom);
    if ("css_observer" in $$props2)
      $$invalidate(2, css_observer = $$props2.css_observer);
    if ("css_animation" in $$props2)
      $$invalidate(3, css_animation = $$props2.css_animation);
    if ("$$scope" in $$props2)
      $$invalidate(9, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    createEventDispatcher,
    animation,
    animation_out,
    once,
    top,
    bottom,
    css_observer,
    css_animation,
    dispatch,
    observing,
    countainer,
    intersection_verify,
    bounding_verify
  });
  $$self.$inject_state = ($$props2) => {
    if ("animation" in $$props2)
      $$invalidate(0, animation = $$props2.animation);
    if ("animation_out" in $$props2)
      $$invalidate(1, animation_out = $$props2.animation_out);
    if ("once" in $$props2)
      $$invalidate(6, once = $$props2.once);
    if ("top" in $$props2)
      $$invalidate(7, top = $$props2.top);
    if ("bottom" in $$props2)
      $$invalidate(8, bottom = $$props2.bottom);
    if ("css_observer" in $$props2)
      $$invalidate(2, css_observer = $$props2.css_observer);
    if ("css_animation" in $$props2)
      $$invalidate(3, css_animation = $$props2.css_animation);
    if ("observing" in $$props2)
      $$invalidate(4, observing = $$props2.observing);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*observing*/
    16) {
      $:
        dispatch("update", { observing });
    }
  };
  return [
    animation,
    animation_out,
    css_observer,
    css_animation,
    observing,
    countainer,
    once,
    top,
    bottom,
    $$scope,
    slots
  ];
}
var Saos = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      animation: 0,
      animation_out: 1,
      once: 6,
      top: 7,
      bottom: 8,
      css_observer: 2,
      css_animation: 3
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Saos",
      options,
      id: create_fragment.name
    });
  }
  get animation() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animation(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get animation_out() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set animation_out(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get once() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set once(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get top() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set top(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get bottom() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set bottom(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get css_observer() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set css_observer(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get css_animation() {
    throw new Error("<Saos>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set css_animation(value) {
    throw new Error("<Saos>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Saos_default = Saos;

// node_modules/saos/index.js
var saos_default = Saos_default;
export {
  saos_default as default
};
//# sourceMappingURL=saos.js.map
